[{"name": "sheet1", "metadata": {"smart_notebook": {"version": 1, "computation_mode": "", "package_manager": "", "base_environment": "", "packages": [], "kernelspec": {"display_name": "Python 3 (ipykernel)", "language": "python", "name": "python3"}}}, "nbformat": 4, "nbformat_minor": 4, "cells": [{"cell_type": "code", "source": ["from time import process_time\nfrom numba import jit, int64, boolean, njit\nfrom functools import reduce\nimport numpy as np\nimport random\nimport gc"], "execution_count": 9, "execution_state": "idle", "outputs": [], "metadata": {"smart_notebook": {"type": "code", "cell_id": "3b2b78285e4af54fe958f005de2f6aab", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 330, "source": ["from time import process_time\nfrom numba import jit, int64, boolean, njit\nfrom functools import reduce\nimport numpy as np\nimport random\nimport gc"]}}}, {"cell_type": "code", "source": ["def in_search(vec, x):\n  return x in vec\n\ndef vec_search(vec, x):\n  return np.any(vec == x)\n\ndef foreach_search(vec, x):\n  for v in vec:\n    if v == x:\n      return True\n  return False\n\n@njit #(boolean(int64[:], int64))\ndef foreach_search_jit(vec, x):\n    for v in vec:\n        if v == x:\n            return True\n    return False\n\n@njit #(boolean(int64[:], int64))\ndef for_search_jit(vec, x):\n    for i in range(len(vec)):\n        if vec[i] == x:\n            return True\n    return False\n\ndef for_search(vec, x):\n  for i in range(len(vec)):\n    if vec[i] == x:\n      return True\n  return False"], "execution_count": 10, "execution_state": "idle", "outputs": [], "metadata": {"smart_notebook": {"type": "code", "cell_id": "ecfd79549a0c69492c98cef966739953", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 101, "source": ["def in_search(vec, x):\n  return x in vec\n\ndef vec_search(vec, x):\n  return np.any(vec == x)\n\ndef foreach_search(vec, x):\n  for v in vec:\n    if v == x:\n      return True\n  return False\n\n@njit #(boolean(int64[:], int64))\ndef foreach_search_jit(vec, x):\n    for v in vec:\n        if v == x:\n            return True\n    return False\n\n@njit #(boolean(int64[:], int64))\ndef for_search_jit(vec, x):\n    for i in range(len(vec)):\n        if vec[i] == x:\n            return True\n    return False\n\ndef for_search(vec, x):\n  for i in range(len(vec)):\n    if vec[i] == x:\n      return True\n  return False"]}}}, {"cell_type": "code", "source": ["def mapr_search(vec, x):\n  return reduce(lambda a,b: a|b,  map(lambda y: y==x, vec), False)\n\ndef gen_search(vec, x):\n  return next((a for a in vec if a==x), -1) >= 0\n\ndef index_search(vec, x):\n  try:\n    vec.index(x)\n    return True\n  except ValueError:\n    return False\n\ndef while_search(vec, x):\n  n = len(vec)\n  i = 0\n  while i < n:\n    if vec[i] == x:\n      return True\n    i += 1\n  return False"], "execution_count": 11, "execution_state": "idle", "outputs": [], "metadata": {"smart_notebook": {"type": "code", "cell_id": "1983b863b33bfb4fd7b8658b1733c1df", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 60, "source": ["def mapr_search(vec, x):\n  return reduce(lambda a,b: a|b,  map(lambda y: y==x, vec), False)\n\ndef gen_search(vec, x):\n  return next((a for a in vec if a==x), -1) >= 0\n\ndef index_search(vec, x):\n  try:\n    vec.index(x)\n    return True\n  except ValueError:\n    return False\n\ndef while_search(vec, x):\n  n = len(vec)\n  i = 0\n  while i < n:\n    if vec[i] == x:\n      return True\n    i += 1\n  return False"]}}}, {"cell_type": "code", "source": ["def mapr_search(vec, x):\n  return np.logical_or.reduce(map(lambda y: y==x, vec))\n\ndef count_search(vec, x):\n  return np.count_nonzero(vec==x) > 0\n\ndef where_search(vec, x):\n  return np.where(vec==x)[0].size > 0"], "execution_count": 12, "execution_state": "idle", "outputs": [], "metadata": {"smart_notebook": {"type": "code", "cell_id": "a6fe164d028b1049400856b0a6e1a9b5", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 57, "source": ["def mapr_search(vec, x):\n  return np.logical_or.reduce(map(lambda y: y==x, vec))\n\ndef count_search(vec, x):\n  return np.count_nonzero(vec==x) > 0\n\ndef where_search(vec, x):\n  return np.where(vec==x)[0].size > 0"]}}}, {"cell_type": "code", "source": ["def bench(label, f, v):\n  f(v[1:10], 0) #warmup\n\n  print(f\"{label}:\")\n  for r in range(3): # three runs\n    gc.collect() #cleaning the garbage before each measurement\n    start_time = process_time()\n    nmatches = sum([f(v, x) for x in range(1,1001)])            \n    end_time = process_time()\n    print(f\"\\telapsed CPU time: {end_time-start_time} seconds\")\n    print(f\"\\t\\tmatches: {nmatches}\")    \n  print()"], "execution_count": 13, "execution_state": "idle", "outputs": [], "metadata": {"smart_notebook": {"type": "code", "cell_id": "d55f747d6067e6436e6a17a61bc2c82c", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 46, "source": ["def bench(label, f, v):\n  f(v[1:10], 0) #warmup\n\n  print(f\"{label}:\")\n  for r in range(3): # three runs\n    gc.collect() #cleaning the garbage before each measurement\n    start_time = process_time()\n    nmatches = sum([f(v, x) for x in range(1,1001)])            \n    end_time = process_time()\n    print(f\"\\telapsed CPU time: {end_time-start_time} seconds\")\n    print(f\"\\t\\tmatches: {nmatches}\")    \n  print()"]}}}, {"cell_type": "code", "source": ["with open(\"/home/vec.txt\") as my_file:\n  l = [int(line) for line in my_file] \nprint(len(l), \"records\")\na = np.asarray(l) # NumPy array"], "execution_count": 7, "execution_state": "idle", "outputs": [{"output_type": "stream", "name": "stdout", "text": ["1000000 records\n"]}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "4f1e1173d360bd4384d9694d0f9d4eee", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 502, "source": ["with open(\"/home/vec.txt\") as my_file:\n  l = [int(line) for line in my_file] \nprint(len(l), \"records\")\na = np.asarray(l) # NumPy array"]}}}, {"cell_type": "code", "source": ["bench(\"IN\",                 in_search,          l)\nbench(\"IN (NumPy)\",         in_search,          a)\nbench(\"VEC (NumPy)\",        vec_search,         a)"], "execution_count": 14, "execution_state": "idle", "outputs": [{"output_type": "stream", "name": "stdout", "text": ["IN:\n\telapsed CPU time: 9.846646306 seconds\n\t\tmatches: 550\n\telapsed CPU time: 9.577097676000001 seconds\n\t\tmatches: 550\n\telapsed CPU time: 9.742581761 seconds\n\t\tmatches: 550\n\nIN (NumPy):\n\telapsed CPU time: 0.47647420999999923 seconds\n\t\tmatches: 550\n\telapsed CPU time: 0.465087625999999 seconds\n\t\tmatches: 550\n\telapsed CPU time: 0.48007000200000505 seconds\n\t\tmatches: 550\n\nVEC (NumPy):\n\telapsed CPU time: 0.47049741700000425 seconds\n\t\tmatches: 550\n\telapsed CPU time: 0.4813271290000003 seconds\n\t\tmatches: 550\n\telapsed CPU time: 0.4783116730000003 seconds\n\t\tmatches: 550\n\n"]}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "2846eeae8c564844138b5528164a7790", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 33007, "source": ["bench(\"IN\",                 in_search,          l)\nbench(\"IN (NumPy)\",         in_search,          a)\nbench(\"VEC (NumPy)\",        vec_search,         a)"]}}, "outputExpand": false}, {"cell_type": "code", "source": ["bench(\"FOREACH\",            foreach_search,     l)\nbench(\"FOREACH (NumPy)\",    foreach_search,     a)\nbench(\"FOREACH (Numba)\",    foreach_search_jit, a)"], "execution_count": 15, "execution_state": "idle", "outputs": [{"output_type": "stream", "name": "stdout", "text": ["FOREACH:\n\telapsed CPU time: 30.472766661 seconds\n\t\tmatches: 550\n\telapsed CPU time: 29.074973106 seconds\n\t\tmatches: 550\n\telapsed CPU time: 30.357707606999995 seconds\n\t\tmatches: 550\n\nFOREACH (NumPy):\n\telapsed CPU time: 119.94623428100002 seconds\n\t\tmatches: 550\n\telapsed CPU time: 125.36096610799999 seconds\n\t\tmatches: 550\n\telapsed CPU time: 123.76814284199997 seconds\n\t\tmatches: 550\n\nFOREACH (Numba):\n\telapsed CPU time: 0.5235451639999837 seconds\n\t\tmatches: 550\n\telapsed CPU time: 0.5271427160000144 seconds\n\t\tmatches: 550\n\telapsed CPU time: 0.5231351689999997 seconds\n\t\tmatches: 550\n\n"]}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "51684a2ae1431e4dadebe8ce29a6c277", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 461921, "source": ["bench(\"FOREACH\",            foreach_search,     l)\nbench(\"FOREACH (NumPy)\",    foreach_search,     a)\nbench(\"FOREACH (Numba)\",    foreach_search_jit, a)"]}}}, {"cell_type": "code", "source": ["bench(\"FOR\",                for_search,         l)\nbench(\"FOR (NumPy)\",        for_search,         a)\nbench(\"FOR (Numba)\",        for_search_jit,     a)"], "execution_count": 16, "execution_state": "idle", "outputs": [{"output_type": "stream", "name": "stdout", "text": ["FOR:\n\telapsed CPU time: 50.617842415999974 seconds\n\t\tmatches: 550\n\telapsed CPU time: 48.01610753099999 seconds\n\t\tmatches: 550\n\telapsed CPU time: 48.82371196700001 seconds\n\t\tmatches: 550\n\nFOR (NumPy):\n\telapsed CPU time: 178.571632895 seconds\n\t\tmatches: 550\n\telapsed CPU time: 177.422419611 seconds\n\t\tmatches: 550\n\telapsed CPU time: 178.94441030299993 seconds\n\t\tmatches: 550\n\nFOR (Numba):\n\telapsed CPU time: 0.40831737700000303 seconds\n\t\tmatches: 550\n\telapsed CPU time: 0.40150549100007993 seconds\n\t\tmatches: 550\n\telapsed CPU time: 0.40912249999996675 seconds\n\t\tmatches: 550\n\n"]}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "c7f72fed578cd547c55b60d5755c8224", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 684892, "source": ["bench(\"FOR\",                for_search,         l)\nbench(\"FOR (NumPy)\",        for_search,         a)\nbench(\"FOR (Numba)\",        for_search_jit,     a)"]}}}], "inputVisible": false}]