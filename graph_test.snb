[{"name": "sheet1", "metadata": {"smart_notebook": {"version": 1, "computation_mode": "", "package_manager": "", "base_environment": "", "packages": [], "kernelspec": {"display_name": "Python 3 (ipykernel)", "language": "python", "name": "python3"}}}, "nbformat": 4, "nbformat_minor": 4, "cells": [{"cell_type": "code", "source": ["x=10\ny=20"], "execution_count": 1, "execution_state": "idle", "outputs": [], "metadata": {"smart_notebook": {"type": "code", "cell_id": "3c004044fb52bf47adfb235f2cc7db8e", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 1657258845448, "execution_millis": 124, "source": ["x=10\ny=20"]}}}, {"cell_type": "code", "source": ["x"], "execution_count": 2, "execution_state": "idle", "outputs": [{"output_type": "execute_result", "metadata": {}, "data": {"text/plain": "10"}}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "b0090b47345b134b2c38a62324099c5b", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 116, "source": ["x"]}}}, {"cell_type": "code", "source": ["y"], "execution_count": 3, "execution_state": "idle", "outputs": [{"output_type": "execute_result", "metadata": {}, "data": {"text/plain": "20"}}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "019baba8b6f06b47beb996cb85a0e000", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 99, "source": ["y"]}}}, {"cell_type": "code", "source": ["from  snb_plugin.sql.execute_sql import _smartnotebook_execute_sql\nimport pandas as pd \ndf1 =_smartnotebook_execute_sql(\"\"\" ## \u5220\u9664 ;\nselect 1 as test from dual \"\"\",\"0242ac110004-11ed42e8-ec231e94-ab94\", context=globals())\nif isinstance(df1,pd.DataFrame):\n    __SNB_DisplayTable(df1)\nelse:\n    print(df1)\n\n"], "metadata": {"smart_notebook": {"type": "sql", "cell_id": "b1379900fca12f475cf8729f93c6a0c5", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 616, "cell_properties": {"db_id": "0242ac110004-11ed42e8-ec231e94-ab94", "variable_name": "df1", "dialect": "", "owner_user_id": "", "source": "## \u5220\u9664 ;\nselect 1 as test from dual"}, "source": ["from  snb_plugin.sql.execute_sql import _smartnotebook_execute_sql\nimport pandas as pd \ndf1 =_smartnotebook_execute_sql(\"\"\" ## \u5220\u9664 ;\nselect 1 as test from dual \"\"\",\"0242ac110004-11ed42e8-ec231e94-ab94\", context=globals())\nif isinstance(df1,pd.DataFrame):\n    __SNB_DisplayTable(df1)\nelse:\n    print(df1)\n\n"]}}, "outputs": [], "execution_state": "idle", "outputExpand": false}, {"cell_type": "code", "source": ["a='aabbcc'\na.__contains__('')"], "execution_count": 2, "execution_state": "idle", "outputs": [{"output_type": "execute_result", "metadata": {}, "data": {"text/plain": "True"}}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "d52f590e1d3d214ff31a3431d3189367", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 83, "source": ["a='aabbcc'\na.__contains__('')"]}}}, {"cell_type": "code", "source": ["import gitlab\ndef gitlab_test(git_url=\"http://172.30.81.88:81/\",git_Access_Token=\"VbneebNsVMrbaQ3NtG_n\",project_id=\"225\",branch='master'):\n    gl = gitlab.Gitlab(git_url, private_token=git_Access_Token)\n    project=gl.projects.get(project_id)\n    branch = project.branches.get(branch)\n    print(branch)"], "execution_count": 29, "execution_state": "idle", "outputs": [], "metadata": {"smart_notebook": {"type": "code", "cell_id": "c3adba19f68d9f42a3fb573ff297c945", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 389, "source": ["import gitlab\ndef gitlab_test(git_url=\"http://172.30.81.88:81/\",git_Access_Token=\"VbneebNsVMrbaQ3NtG_n\",project_id=\"225\",branch='master'):\n    gl = gitlab.Gitlab(git_url, private_token=git_Access_Token)\n    project=gl.projects.get(project_id)\n    branch = project.branches.get(branch)\n    print(branch)"]}}}, {"cell_type": "code", "source": ["gitlab_test(branch='master')"], "execution_count": 30, "execution_state": "idle", "outputs": [{"output_type": "stream", "name": "stdout", "text": ["<class 'gitlab.v4.objects.branches.ProjectBranch'> => {'name': 'master', 'commit': {'id': '414f752310d42852e82b30474bca483d6e2dc601', 'short_id': '414f7523', 'created_at': '2022-08-12T07:23:18.000Z', 'parent_ids': ['46b4040dd244e750c5de628484500f2799cf219e'], 'title': '009', 'message': '009', 'author_name': '\u738b\u65b0\u4e49', 'author_email': 'xinyi.wang@yeexun.com.cn', 'authored_date': '2022-08-12T07:23:18.000Z', 'committer_name': '\u738b\u65b0\u4e49', 'committer_email': 'xinyi.wang@yeexun.com.cn', 'committed_date': '2022-08-12T07:23:18.000Z'}, 'merged': False, 'protected': True, 'developers_can_push': False, 'developers_can_merge': False, 'can_push': True, 'default': True}\n"]}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "b71cef824d84744e134908d4a6ebaf32", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 784, "source": ["gitlab_test(branch='master')"]}}}, {"cell_type": "code", "source": ["from github import Github\nfrom github import UnknownObjectException\n\ndef github_test(project_name,branch,token):\n  github_g = Github(token)\n  repo = github_g.get_repo(project_name)\n  br=repo.get_branch(branch=branch)\n  return str(br)\n\ngithub_commit(\"wrss01/dbt_test02\",\"main\",\"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\")"], "execution_count": 31, "execution_state": "idle", "outputs": [{"output_type": "stream", "name": "errMsg", "text": ["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)", "Cell \u001b[0;32mIn[31], line 10\u001b[0m\n\u001b[1;32m      7\u001b[0m   br\u001b[38;5;241m=\u001b[39mrepo\u001b[38;5;241m.\u001b[39mget_branch(branch\u001b[38;5;241m=\u001b[39mbranch)\n\u001b[1;32m      8\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mstr\u001b[39m(br)\n\u001b[0;32m---> 10\u001b[0m \u001b[43mgithub_commit\u001b[49m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwrss01/dbt_test02\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmain\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m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\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n", "\u001b[0;31mNameError\u001b[0m: name 'github_commit' is not defined"]}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "d962436508751047dd084ba0f6fb2bb5", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 858, "source": ["from github import Github\nfrom github import UnknownObjectException\n\ndef github_test(project_name,branch,token):\n  github_g = Github(token)\n  repo = github_g.get_repo(project_name)\n  br=repo.get_branch(branch=branch)\n  return str(br)\n\ngithub_commit(\"wrss01/dbt_test02\",\"main\",\"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\")"]}}}, {"cell_type": "code", "source": ["def ddd():\n  \"\"\" hhh \"\"\"\n  print(\"ddd\")\nd=ddd\nprint(d.__name__)"], "execution_count": 4, "execution_state": "idle", "outputs": [{"output_type": "stream", "name": "stdout", "text": ["ddd\n"]}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "53acae13ecbcfe4d1fe839ce969070a8", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 121, "source": ["def ddd():\n  \"\"\" hhh \"\"\"\n  print(\"ddd\")\nd=ddd\nprint(d.__name__)"]}}}, {"cell_type": "code", "source": ["import json\nimport urllib.request\n\n__MODULE_NAME__ = \"test1\"\n\ndef getBody(request,requestHandler) -> 'HTTP':\n    \"\"\"\n        tags:\n        - Workspace Nb Folder\n        summary: \"\"\n        description: test1\n        produces:\n        - application/json\n        parameters:\n        - in: body\n          name: body\n          description: post data\n          required: true\n          schema:\n            type: object\n            properties:\n              city:\n                type: string\n                default: \"\u57ce\u5e02\u540d\u79f0\"\n        responses:\n            200:\n              description: \u8bf7\u6c42\u6210\u529f\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    default: 200\n                  msg:\n                    type: string\n                    default:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        uid:\n                          type: string\n                          default: \"workspace nb folder uuid\"\n            400:\n              description: \u8bf7\u6c42\u5931\u8d25\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    default: 400\n                  msg:\n                    type: string\n                    default: \n        \"\"\"\n\n    params = json.loads(request.body)\n    dict = {\"\u4e0a\u6d77\":\"101020100\",\"\u5317\u4eac\":\"101010100\"}\n    r = urllib.request.urlopen('http://www.weather.com.cn/data/sk/'+dict.get(params.get(\"city\"))+'.html')\n    requestHandler.write(r.read().decode())"], "execution_count": 0, "execution_state": "idle", "outputs": [], "metadata": {"smart_notebook": {"type": "code", "cell_id": "dc805361e15a4e463deaa7be38ec069a", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 0, "source": ["import json\nimport urllib.request\n\n__MODULE_NAME__ = \"test1\"\n\ndef getBody(request,requestHandler) -> 'HTTP':\n    \"\"\"\n        tags:\n        - Workspace Nb Folder\n        summary: \"\"\n        description: test1\n        produces:\n        - application/json\n        parameters:\n        - in: body\n          name: body\n          description: post data\n          required: true\n          schema:\n            type: object\n            properties:\n              city:\n                type: string\n                default: \"\u57ce\u5e02\u540d\u79f0\"\n        responses:\n            200:\n              description: \u8bf7\u6c42\u6210\u529f\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    default: 200\n                  msg:\n                    type: string\n                    default:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        uid:\n                          type: string\n                          default: \"workspace nb folder uuid\"\n            400:\n              description: \u8bf7\u6c42\u5931\u8d25\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    default: 400\n                  msg:\n                    type: string\n                    default: \n        \"\"\"\n\n    params = json.loads(request.body)\n    dict = {\"\u4e0a\u6d77\":\"101020100\",\"\u5317\u4eac\":\"101010100\"}\n    r = urllib.request.urlopen('http://www.weather.com.cn/data/sk/'+dict.get(params.get(\"city\"))+'.html')\n    requestHandler.write(r.read().decode())"]}}}, {"cell_type": "code", "source": ["%matplotlib inline\nimport matplotlib.pyplot as plt\n\n# \u7ed8\u5236\u7ea2\u8272\u7684\u201c\u5143\u201d\u5b57\nplt.plot([-50, 50], [0, 0], \"r-\", linewidth=3)\nplt.plot([0, 0], [-50, 50], \"r-\", linewidth=3)\n\n# \u7ed8\u5236\u7eff\u8272\u7684\u201c\u65e6\u201d\u5b57\nplt.plot([100, 150], [0, 0], \"g-\", linewidth=3)\nplt.plot([100, 100], [0, 50], \"g-\", linewidth=3)\nplt.plot([100, 150], [50, 50], \"g-\", linewidth=3)\n\n# \u7ed8\u5236\n"], "execution_count": 3, "execution_state": "idle", "outputs": [{"output_type": "execute_result", "metadata": {}, "data": {"text/plain": "[<matplotlib.lines.Line2D at 0x7fc8c1a34670>]"}}, {"output_type": "display_data", "metadata": {}, "data": {"text/plain": "<Figure size 640x480 with 1 Axes>", "image/png": "\n"}}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "d60b151d2215124e0929e9b22ff960b2", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 424, "source": ["%matplotlib inline\nimport matplotlib.pyplot as plt\n\n# \u7ed8\u5236\u7ea2\u8272\u7684\u201c\u5143\u201d\u5b57\nplt.plot([-50, 50], [0, 0], \"r-\", linewidth=3)\nplt.plot([0, 0], [-50, 50], \"r-\", linewidth=3)\n\n# \u7ed8\u5236\u7eff\u8272\u7684\u201c\u65e6\u201d\u5b57\nplt.plot([100, 150], [0, 0], \"g-\", linewidth=3)\nplt.plot([100, 100], [0, 50], \"g-\", linewidth=3)\nplt.plot([100, 150], [50, 50], \"g-\", linewidth=3)\n\n# \u7ed8\u5236\n"]}}}, {"cell_type": "code", "source": ["import time\nfor i in range(10):\n  print(i)\n  time.sleep(1)"], "execution_count": 7, "execution_state": "idle", "outputs": [{"output_type": "stream", "name": "stdout", "text": ["0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n"]}], "metadata": {"smart_notebook": {"type": "code", "cell_id": "f7f2f06fa0c44a44bea831da79ed493a", "hide_input_from_viewers": false, "hide_output_from_viewers": false, "execution_start": 0, "execution_millis": 10105, "source": ["import time\nfor i in range(10):\n  print(i)\n  time.sleep(1)"]}}}], "inputVisible": false}]